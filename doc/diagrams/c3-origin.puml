@startuml c3-origin

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title Component Diagram\nMcEarl\nOrigin Node
AddRelTag("dashed", $lineStyle = DashedLine())

Person(client1, "Client", "Plays Multiplayer")
Person(client2, "Client", "Plays Multiplayer")
Person(client3, "Client", "Plays Multiplayer")

Container_Boundary(boundary, "Origin Node") {
	Component(origin_sup, "Master Supervisor", "Component: Erlang Supervisor Actor")
	Component(heartbeat, "Heartbeat", "Component: Erlang Worker Actor")
	Component(controller_sup, "Controller Actor Supervisor", "Component: Erlang Worker Supervisor")
	Component(controller_man, "Controller Actor Manager", "Component: Erlang Worker Worker")
	Component(controller, "Peer Node Controller", "Component: Erlang Worker Actor")
	Component(proxy, "TCP Proxy", "Component: Erlang Worker Actor")
	Component(ranch, "TCP Pooling Library", "Component: Erlang Application")
}

Container_Ext(server1, "Server Peer Node", "Container: Erlang Distributed Application")
Container_Ext(server2, "Server Peer Node", "Container: Erlang Distributed Application")
Container_Ext(server3, "Server Peer Node", "Container: Erlang Distributed Application")
Container_Ext(monitor, "Monitoring Node", "Container: Erlang Distributed Application")
System_Ext(classicube, "Classicube", "Hosts the server list")

Rel(origin_sup, heartbeat, "supervises")
Rel(origin_sup, controller_sup, "supervises")
Rel(origin_sup, controller_man, "supervises")
Rel(origin_sup, controller, "supervises")
Rel(origin_sup, proxy, "supervises")
Rel(client1, ranch, "connects via")
Rel(client2, ranch, "connects via")
Rel(client3, ranch, "connects via")
Rel(ranch, proxy, "gives communication rights to")
Rel(proxy, controller_man, "asks for an available server")
Rel(proxy, server1, "proxies to")
Rel(proxy, server2, "proxies to")
Rel(proxy, server3, "proxies to")
Rel(controller_man, controller_sup, "spawns new controller actors")
Rel(controller_man, controller, "managers")
Rel(controller_sup, controller, "supervises")
Rel(heartbeat, classicube, "sends heartbeat packets to")
Rel(origin_sup, monitor, "notifies to enter into the cluster")


LAYOUT_WITH_LEGEND()
@enduml
